#!/usr/bin/env python2.7
"""
This script exists because depot_tools (the git wrapper used by V8) does not
fetch fixed versions of the dependencies it downloads via Git. There are some
20+ git repos fetched. This script extracts the git version hashes from an
existing V8 source directory (with dependencies pre-fetched) and generates a
shell script which checks out those specific versions. The script can then be
used in the future (namely in future invocations of build.sh) to ensure that
later builds always use precisely the same versions as when the shell script
was generated.
"""

import subprocess
import os


TOP_DIR = os.path.abspath(os.path.join(__file__, "..", ".."))
V8_DIR = os.path.join("work", "v8")


def find_git_repos():
    os.chdir(V8_DIR)
    args = ["find", ".", "-name", ".git", "-type", "d"]
    p = subprocess.Popen(args, stdout=subprocess.PIPE)
    sout, _ = p.communicate()
    assert p.returncode == 0
    return sout.splitlines()


def get_git_version(direc):
    os.chdir(os.path.join(TOP_DIR, V8_DIR, direc))
    args = ["git", "rev-parse", "HEAD"]
    p = subprocess.Popen(args, stdout=subprocess.PIPE)
    sout, _ = p.communicate()
    assert p.returncode == 0
    return sout.strip()


def main():
    print("# This file is auto-generated by find_v8_git_versions.py\n")
    paths = find_git_repos()
    for direc in paths:
        if direc == "./.git":
            # top-level is already taken care of in build.sh
            continue
        parent = os.path.join(direc, "..")
        vers = get_git_version(parent)
        print("cd %s && \\\n    "
              "git checkout %s && \\\n    "
              "cd - || exit $?" % (parent, vers))


if __name__ == "__main__":
    main()
