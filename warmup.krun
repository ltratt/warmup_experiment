import os
import sys
import platform
from krun.vm_defs import (PythonVMDef, LuaVMDef, JavaVMDef, GraalVMDef,
                          PHPVMDef, TruffleRubyVMDef, V8VMDef,
                          NativeCodeVMDef, find_internal_jvmci_java_home,
                          find_internal_jvmci_java_bin, PyPyVMDef)
from krun import EntryPoint
from krun.util import run_shell_cmd

def ghz(x):
    return x * 1000 * 1000 * 1000

# we say a core was idle if APERF was less than 1/1000th a busy count (per second)
IDLE_DIVIDE = 1000

# Rough rate of APERF increment per second.
# On our machines, APERF happens to increment at the same rate as the base
# frequency.
BUSY_THRESHOLDS = {
    "bencher5": ghz(3.6) / IDLE_DIVIDE,
    "bencher7": ghz(3.5) / IDLE_DIVIDE,
    # bencher6 not listed, as Krun doesn't support APERF on BSD
}

# Who to mail
MAIL_TO = []

HOSTNAME = platform.node().split(".")[0]
DIR = os.getcwd()
JKRUNTIME_DIR = os.path.join(DIR, "krun", "libkruntime", "")

if sys.platform.startswith("linux"):
    JDK8_HOME = os.path.join(DIR, "work/openjdk/build/linux-x86_64-normal-server-release/images/j2sdk-image/")
elif sys.platform.startswith("openbsd"):
    JDK8_HOME = os.path.join(DIR, "work/openjdk/build/bsd-x86_64-normal-server-release/images/j2sdk-image/")
else:
    raise NotImplementedError("unknown platform")

JDK8_BIN = os.path.join(JDK8_HOME, "bin", "java")

if sys.platform.startswith("linux"):
    GCC_ENV = {"LD_LIBRARY_PATH": os.path.join(DIR, "work/gcc-inst/lib64")}
elif sys.platform.startswith("openbsd"):
    GCC_ENV = {"LD_LIBRARY_PATH": os.path.join(DIR, "work/gcc-inst/lib")}
else:
    raise NotImplementedError("unknown platform")

HEAP_LIMIT = 2097152  # 2GiB
STACK_LIMIT = 8192  # 8 MiB

# Variant name -> EntryPoint
VARIANTS = {
    "default-c": EntryPoint("bench.so", subdir="c"),
    "default-java": EntryPoint("KrunEntry", subdir="java"),
    "default-lua": EntryPoint("bench.lua", subdir="lua"),
    "default-python": EntryPoint("bench.py", subdir="python"),
    "default-php": EntryPoint("bench.php", subdir="php"),
    "default-ruby": EntryPoint("bench.rb", subdir="ruby"),
    "default-javascript": EntryPoint("bench.js", subdir="javascript"),
}

ITERATIONS_ALL_VMS = 2000

VMS = {
    'C': {
        'vm_def': NativeCodeVMDef(env=GCC_ENV),
        'variants': ['default-c'],
        'n_iterations': ITERATIONS_ALL_VMS,
    },
    'PyPy': {
        'vm_def': PyPyVMDef('work/pypy/pypy/goal/pypy-c',
                            env=GCC_ENV),
        'variants': ['default-python'],
        'n_iterations': ITERATIONS_ALL_VMS,
    },
    'HotSpot': {
        'vm_def': JavaVMDef(JDK8_BIN, env=GCC_ENV),
        'variants': ['default-java'],
        'n_iterations': ITERATIONS_ALL_VMS,
    },
    'LuaJIT': {
        'vm_def': LuaVMDef('work/luajit/src/luajit', env=GCC_ENV),
        'variants': ['default-lua'],
        'n_iterations': ITERATIONS_ALL_VMS,
    },
    'V8': {
        'vm_def': V8VMDef('work/v8/out/native/d8', env=GCC_ENV),
        'variants': ['default-javascript'],
        'n_iterations': ITERATIONS_ALL_VMS,
    },
    'CPython': {
        'vm_def': PythonVMDef('work/cpython-inst/bin/python',
                              env=GCC_ENV),
        'variants': ['default-python'],
        'n_iterations': ITERATIONS_ALL_VMS,
    }
}

if not sys.platform.startswith("openbsd"):
    JVMCI_JAVA_HOME = find_internal_jvmci_java_home('work/graal-jvmci-8/')

    # The following VMs do not run on OpenBSD.
    VMS.update({
        'Graal': {
            'vm_def': GraalVMDef('work/graal', 'work/mx/mx',
                                 java_home=JVMCI_JAVA_HOME, env=GCC_ENV),
            'variants': ['default-java'],
            'n_iterations': ITERATIONS_ALL_VMS,
        },
        'HHVM': {
            'vm_def': PHPVMDef('work/hhvm/hphp/hhvm/php', env=GCC_ENV),
            'variants': ['default-php'],
            'n_iterations': ITERATIONS_ALL_VMS,
        },
        'TruffleRuby': {
            'vm_def': TruffleRubyVMDef(truffleruby_dir='work/truffleruby',
                                       graal_home='work/graal',
                                       mx_dir='work/mx',
                                       jvmci_home=JVMCI_JAVA_HOME,
                                       env=GCC_ENV),
            'variants': ['default-ruby'],
            'n_iterations': ITERATIONS_ALL_VMS,
        },
    })


BENCHMARKS = {
    'binarytrees': 25,
    'richards': 500,
    'spectralnorm': 3,
    'nbody': 15,
    'fasta': 100,
    'fannkuch_redux': 200,
}

# list of "bench:vm:variant"
SKIP = [
    # Uncomment to skip whole VMs
    #
    #"*:PyPy:*",
    "*:CPython:*",
    #"*:HotSpot:*",
    #"*:Graal:*",
    #"*:LuaJIT:*",
    #"*:HHVM:*",
    #"*:TruffleRuby:*",
    #"*:V8:*",
    #"*:C:*",

    # Skipped due to being really slow.
    "richards:HHVM:default-php",
    "nbody:HHVM:default-php",
    "fasta:TruffleRuby:default-ruby",
]

N_EXECUTIONS = 30  # Number of fresh processes.

if sys.platform.startswith("linux"):
    AMPERF_RATIO_BOUNDS = 0.99, 1.01
    AMPERF_BUSY_THRESHOLD = BUSY_THRESHOLDS[HOSTNAME]

if sys.platform.startswith("linux"):
    # Assumes systemd is used for init.
    PING_HOST = "bencher8.soft-dev.org"
    PRE_EXECUTION_CMDS = [
        # Stop network first. If an interface accepts a DHCP lease during one
        # of the later commands below, it can cause the command to be
        # "cancelled" by systemd. Bringing the network itself down can fail in
        # the same way, so keep trying (with sleeps between).
        "while true; do sudo systemctl stop networking; sleep 5; ping -q -c 10 %s || break; done" % PING_HOST,
        "sudo systemctl stop cron",
        "sudo systemctl stop atd",
        "sudo systemctl stop postfix",
        "sudo systemctl stop ssh",
    ]

    POST_EXECUTION_CMDS = [
        # The network doesn't always come up properly on debian. We keep trying
        # until we can ping a host on the network.
        "while true; do ping -c 3 -q %s && break; sudo systemctl stop networking; sleep 5; sudo systemctl start networking; done" % PING_HOST,
        "sudo systemctl start ssh || true",
        "sudo systemctl start cron || true",
        "sudo systemctl start atd || true",
        "sudo systemctl start postfix || true",
    ]
elif sys.platform.startswith("openbsd"):
    PRE_EXECUTION_CMDS = [
        "sudo /etc/rc.d/ntpd stop",
        "sudo /etc/rc.d/cron stop",
        "sudo /etc/rc.d/smtpd stop",
        "sudo /etc/rc.d/pflogd stop",
        "sudo /etc/rc.d/sshd stop",
        "for intf in `ifconfig  | grep -e '^[a-z]' | cut -f 1 -d ':' | grep -v '^lo0$'`; do sudo ifconfig $intf down; done",
    ]

    POST_EXECUTION_CMDS = [
        "sudo sh /etc/netstart",
        "sudo /etc/rc.d/sshd start || true",
        "sudo /etc/rc.d/ntpd start || true",
        "sudo /etc/rc.d/cron start || true",
        "sudo /etc/rc.d/smtpd start || true",
        "sudo /etc/rc.d/pflogd start || true",
    ]
else:
    assert False


# Copy off results after each execution -- soft-dev specific!
#
# This assumes a no-password SSH key named 'id_rsa' is present in this
# directory, and that the corresponding public key is installed on the correct
# user on the remote machine.
#
# We allow failure, otherwise Krun will halt the experiment if (e.g.) the
# SSH server hostname is temporarily unavailable.
REMOTE_LOGIN = "vext01@bencher8.soft-dev.org"
REMOTE_DIR = "research/krun_results/"

SSH_BATCH = "ssh -o 'BatchMode yes' -i id_rsa"
SCP_CMD = ("tar czf - ${KRUN_RESULTS_FILE} ${KRUN_LOG_FILE} ${KRUN_MANIFEST_FILE} | "
           "%s %s 'cat > %s/%s.tgz'" %
           (SSH_BATCH, REMOTE_LOGIN, REMOTE_DIR, HOSTNAME))
POST_EXECUTION_CMDS.append(
    "%s || ( sleep 2; %s ) || true " % (SCP_CMD, SCP_CMD))
POST_EXECUTION_CMDS.append("%s %s 'test ! -e %s/%s.stop'" %
                           (SSH_BATCH, REMOTE_LOGIN, REMOTE_DIR, HOSTNAME))
